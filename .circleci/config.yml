version: 2
jobs:

  integration-test-image:
    docker:
      - image: magalixcorp/circleci-golang-lite:1.17

    steps:
      - checkout
      - run:
          name: Build test binary
          command:
            export GOMODULE=off
            export CGO_ENABLED=0
            export GOPRIVATE=github.com/MagalixTechnologies
            
            apk add build-base

            go test -c -covermode=atomic -o ./integration/agent-test -cover -coverpkg=github.com/MagalixCorp/magalix-agent/v3/agent/...,github.com/MagalixCorp/magalix-agent/v3/auditor/...,github.com/MagalixCorp/magalix-agent/v3/client/...,github.com/MagalixCorp/magalix-agent/v3/entities/...,github.com/MagalixCorp/magalix-agent/v3/gateway/...,github.com/MagalixCorp/magalix-agent/v3/kuber/...

      - setup_remote_docker
    
      - run:
          name: Build and push test image
          command:
            cd integration

            docker build -t magalixcorp/agent:${CIRCLE_BRANCH}.test .

            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"

            docker push magalixcorp/agent:${CIRCLE_BRANCH}.test


  integration-test:
    environment:
      TEST_GOOGLE_PROJECT_ID: prod-env-203121
      TEST_GOOGLE_CLUSTER_NAME: fue-automation-dontdelete
      TEST_GOOGLE_COMPUTE_ZONE: us-central1-a

    docker:
      - image: circleci/python:3.6.3

    working_directory: ~/repo

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "integration/requirements.txt" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-327.0.0-linux-x86_64.tar.gz
            tar -xf google-cloud-sdk-327.0.0-linux-x86_64.tar.gz && sudo mv google-cloud-sdk /usr/local/bin/
            PATH=$PATH:/usr/local/bin/google-cloud-sdk/bin
            echo 'export PATH=$PATH:/usr/local/bin/google-cloud-sdk/bin' >> $BASH_ENV
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.0/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            python3 -m venv venv
            . venv/bin/activate

            pip install -r integration/requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "integration/requirements.txt" }}

      - run:
          name: run tests
          no_output_timeout: 20m
          command: |
            . venv/bin/activate

            cd integration/tests

            echo ${ENV_GCP_SECRET} | base64 -d | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${TEST_GOOGLE_PROJECT_ID}
            gcloud --quiet container clusters get-credentials ${TEST_GOOGLE_CLUSTER_NAME} --zone=${TEST_GOOGLE_COMPUTE_ZONE}

            export PYTHONPATH=$PYTHONPATH:$(dirname $(pwd))

            if [[ "$CIRCLE_BRANCH" == "master" ]]
            then
              export URL=https://console.magalix.com
              export EMAIL=${EMAIL_PRD_ENV}
              export PASSWORD=${PASSWORD_PRD_ENV}
            else
              export URL=https://console.gcp.dev.magalix.com
              export EMAIL=${EMAIL_DEV_ENV}
              export PASSWORD=${PASSWORD_DEV_ENV}
            fi

            export AGENT_IMAGE=magalixcorp/agent:${CIRCLE_BRANCH}.test

            export CODECOV_URL="https://codecov.io/upload/v2?token=${AGENT_CODECOV_TOKEN}&commit=${CIRCLE_SHA1}&flags=integration"

            mkdir -p ~/test-results
            pytest -o junit_family=xunit2 --junitxml=~/test-results/report.xml

      - store_test_results:
          path: ~/test-results

      - store_artifacts:
          path: ~/test-results


  "build & push":
    docker:
      - image: magalixcorp/circleci-golang-lite:1.17

    steps:
      - run:
          name: Set up source path directory
          command: |
            echo 'export SOURCE_PATH=/home/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME' >> $BASH_ENV
            echo 'export GO111MODULE=on' >> $BASH_ENV
            echo 'export GOPRIVATE=github.com/MagalixTechnologies' >> $BASH_ENV
            echo 'export PATH=/usr/local/bin/upx:$PATH' >> $BASH_ENV
            echo 'export PATH=/usr/bin/gcloud:$PATH' >> $BASH_ENV
            echo 'export PATH=/root/google-cloud-sdk/bin:$PATH' >> $BASH_ENV

      - run:
          name: Install Google Cloud SDK
          command: |
            apk update
            apk add python3

            # Update the package list and install the Cloud SDK
            curl https://sdk.cloud.google.com | bash -s -- --disable-prompts

            # The next line updates PATH for the Google Cloud SDK.
            source /root/google-cloud-sdk/completion.bash.inc

            source $BASH_ENV
      - run:
          name: Checkout code
          command: |
            mkdir -p ~/.ssh
            echo 'StrictHostKeyChecking no' >> ~/.ssh/config

            git config --global \
              url."ssh://git@github.com".insteadOf "https://github.com"

            git clone -q --recursive "$CIRCLE_REPOSITORY_URL" "$SOURCE_PATH"

            cd $SOURCE_PATH

            if [[ "$CIRCLE_TAG" ]]; then
              git checkout -q "$CIRCLE_TAG"
            fi

            if [[ "$CIRCLE_BRANCH" ]]; then
              git checkout -q "$CIRCLE_BRANCH"
            fi

      - run:
          name: Should push?
          command: |
            if [[ "$CIRCLE_BRANCH" == "dev" || "$CIRCLE_BRANCH" == "master" ]]
            then
              echo 'export SHOULD_PUSH=true' >> $BASH_ENV
            else
              echo :: will not push
            fi

      - restore_cache:
          keys:
            - go-src-pkg-cache-v2

      - run:
          name: Build binary
          command: |

            export GOCACHE=/go/cache/

            cd $SOURCE_PATH
            make build

      - save_cache:
          key: go-src-pkg-cache-v2
          paths:
            - /go/src/k8s.io/
            - /go/pkg/
            - /go/cache/

      - setup_remote_docker

      - run:
          name: Build docker image
          command: |
            if [[ ! "$SHOULD_PUSH" ]]; then
              echo :: no push

              exit 0
            fi
            cd $SOURCE_PATH

            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              export VERSION=latest
            fi

            if [[ "$CIRCLE_BRANCH" == "dev" ]]; then
              export VERSION=dev
            fi

            make image VERSION=$VERSION

      - run:
          name: run test
          command: |
            cd $SOURCE_PATH
            apk add build-base

            go test -v -cover -covermode=atomic -coverprofile=coverage.txt ./...
            bash <(curl -s https://codecov.io/bash) -F unit

      - run:
          name: Scan The Image
          command: |
            if [[ ! "$SHOULD_PUSH" ]]; then
              echo :: no push

              exit 0
            fi
            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              export VERSION=latest
            fi

            if [[ "$CIRCLE_BRANCH" == "dev" ]]; then
              export VERSION=dev
            fi

            cd $SOURCE_PATH
            make anchore_scan VERSION=$VERSION

      - store_artifacts:
          path: anchore-reports/

      - deploy:
          name: Push to Docker Registry
          command: |
            if [[ ! "$SHOULD_PUSH" ]]; then
              echo :: no push

              exit 0
            fi

            cd $SOURCE_PATH

            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"

            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              export VERSION=latest
            fi

            if [[ "$CIRCLE_BRANCH" == "dev" ]]; then
              export VERSION=dev
            fi

            make push@magalixcorp tag-file=new-tag version-file=new-version VERSION=$VERSION

      - deploy:
          name: Build image & Push to GCR Registry
          command: |
            if [[ ! "$SHOULD_PUSH" ]]; then
              echo :: no push

              exit 0
            fi

            export AGENT_TAG_MAJOR=3.2

            cd $SOURCE_PATH

            push_to_gcr() {
              GCLOUD_SERVICE_KEY=$1
              GOOGLE_COMPUTE_ZONE=$2
              GOOGLE_PROJECT_ID=$3
              TAG=$4

              echo "pushing to GCP  $GOOGLE_PROJECT_ID"
              gcloud --quiet components update
              echo $GCLOUD_SERVICE_KEY | base64 -d - | gcloud auth activate-service-account --key-file=-
              gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
              gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
              gcloud auth configure-docker
              docker build -t gcr.io/${GOOGLE_PROJECT_ID}/agent:${TAG} -f Dockerfile .
              docker push gcr.io/${GOOGLE_PROJECT_ID}/agent:${TAG}
            }

            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              push_to_gcr ${GCLOUD_SERVICE_KEY_PROD} ${GOOGLE_COMPUTE_ZONE} ${GOOGLE_PROJECT_ID_PROD} ${AGENT_TAG_MAJOR}
            else
              push_to_gcr ${GCLOUD_SERVICE_KEY} ${GOOGLE_COMPUTE_ZONE} ${GOOGLE_PROJECT_ID} ${AGENT_TAG_MAJOR}
            fi

  update:
    docker:
      - image: mgxinternal/mgx-circle-deployer:1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
    - run:
        name: Auth to cluster
        command: |
          /bin/auth_to_cluster
    - run:
        name: Update running agents
        command: |
          kubectl port-forward -n magalix-glb service/agent-gateway-aggregator 8080:80 &
          while ! netstat -tna | grep 'LISTEN\>' | grep 8080; do sleep 3 ; done
          curl -X "POST" http://localhost:8080/api/v1/agents/restart

workflows:
  version: 2
  "build & push":
    jobs:
      - integration-test-image:
          context: org-global
      - integration-test:
          context: org-global
          requires:
            - integration-test-image
      - "build & push":
          context: org-global
          requires:
            - integration-test
      - update:
          context: org-global
          requires:
            - "build & push"
          filters:
            branches:
              only:
                - dev
